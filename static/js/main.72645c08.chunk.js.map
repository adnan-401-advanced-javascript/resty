{"version":3,"sources":["components/Header.js","components/Results.js","components/Form.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","Results","props","json","this","Form","fetchData","console","log","state","method","url","fetch","headers","then","res","a","obj","entries","key","value","resJson","setState","responseJson","Headers","Response","onChangeMethod","e","target","onChangeUrl","printUrlAndMethod","preventDefault","goMethod","goUrl","onSubmit","placeholder","onChange","checked","type","name","htmlFor","style","float","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iOAIqBA,G,6KAEjB,OACE,4BAAQC,UAAU,UACf,0C,GAJ2BC,c,wDCQrBC,E,qKAPNC,GACL,OACE,kBAAC,IAAD,CAAYC,KAAMC,KAAKF,MAAMC,W,GAHbH,aCEDK,G,yDACnB,WAAYH,GAAQ,IAAD,8BACnB,cAAMA,IAURI,UAAY,WACVC,QAAQC,IAAI,QAAS,EAAKC,MAAMC,OAAQ,EAAKD,MAAME,KACnDC,MAAM,EAAKH,MAAME,IAAI,CACnBD,OAAQ,EAAKD,MAAMC,QAAU,MAC7BG,QAAS,CACP,eAAgB,sBAGlBC,KANF,uCAMO,WAAOC,GAAP,2BAAAC,EAAA,sDACCC,EAAM,GADP,cAEoBF,EAAIF,QAAQK,WAFhC,IAEL,2BAAiD,EAAD,uBAAtCC,EAAsC,KAAjCC,EAAiC,KAC9CH,EAAIE,GAAOC,EAHR,8CAKkBL,EAAIZ,OALtB,OAKEkB,EALF,OAMJ,EAAKC,SAAS,CAAEC,aAAc,CAAEC,QAASP,EAAKQ,SAAUJ,KANpD,2CANP,wDAbmB,EA6BrBK,eAAiB,SAAAC,GAAC,OAAI,EAAKL,SAAS,CAAEZ,OAAQiB,EAAEC,OAAOR,SA7BlC,EA8BrBS,YAAc,SAAAF,GAAC,OAAI,EAAKL,SAAS,CAAEX,IAAKgB,EAAEC,OAAOR,SA9B5B,EAgCrBU,kBAAoB,SAAAH,GAClBA,EAAEI,iBACF,EAAKT,SAAS,CAAEU,SAAU,EAAKvB,MAAMC,SACrC,EAAKY,SAAS,CAAEW,MAAO,EAAKxB,MAAME,MAClC,EAAKL,aAlCL,EAAKG,MAAQ,CACXC,OAAQ,GACRC,IAAK,GACLqB,SAAU,GACVC,MAAO,GACPV,aAAc,IAPG,E,qDAwCnB,OACE,6BACE,0BAAMW,SAAU9B,KAAK0B,kBAAmB/B,UAAU,QAChD,6BACA,6BACA,6BACA,2BAAOoC,YAAY,UAAUC,SAAUhC,KAAKyB,cAC5C,6BACA,2BAAOQ,SAAO,EAACC,KAAK,QAAQlB,MAAM,MAAMmB,KAAK,SAASH,SAAUhC,KAAKsB,iBACrE,2BAAOc,QAAQ,OAAf,OACA,2BAAOF,KAAK,QAAQlB,MAAM,OAAOmB,KAAK,SAASH,SAAUhC,KAAKsB,iBAC9D,2BAAOc,QAAQ,QAAf,QACA,2BAAOF,KAAK,QAAQlB,MAAM,MAAMmB,KAAK,SAASH,SAAUhC,KAAKsB,iBAC7D,2BAAOc,QAAQ,OAAf,OACA,2BAAOF,KAAK,QAAQlB,MAAM,SAASmB,KAAK,SAASH,SAAUhC,KAAKsB,iBAChE,2BAAOc,QAAQ,UAAf,UACA,6BACA,4BAAQF,KAAK,UAAb,OAEF,6BACE,8BAAOlC,KAAKK,MAAMuB,SAAlB,SAAoC5B,KAAKK,MAAMwB,MAA/C,MAEF,yBAAKQ,MAAO,CAAEC,MAAO,SACrB,kBAAC,EAAD,CAASvC,KAAMC,KAAKK,MAAMc,qB,GAhEEvB,cCFb2C,G,8KAEjB,OACE,4BAAQ5C,UAAU,e,GAHYC,cCerB4C,MAZf,WACE,OACE,yBAAK7C,UAAU,OACb,kBAAC,EAAD,MACA,8BACA,kBAAC,EAAD,OAEA,kBAAC,EAAD,QCFc8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,a","file":"static/js/main.72645c08.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport '../styles/header.scss';\n\nexport default class Header extends Component {\n  render(){\n    return (\n      <header className=\"header\">\n         <h1>RESTy</h1>\n      </header>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport JSONPretty from 'react-json-prettify';\n\n\nclass Results extends Component {\n  render(props) {\n    return (\n      <JSONPretty json={this.props.json} />\n    )\n  }\n}\n\nexport default Results\n","import React, { Component } from \"react\";\n\nimport Results from \"./Results\";\n\nimport '../styles/form.scss';\n\nexport default class Form extends Component {\n  constructor(props) {\n  super(props);\n  this.state = {\n    method: '',\n    url: '',\n    goMethod: \"\",\n    goUrl: \"\",\n    responseJson: {},\n  }\n}\n\nfetchData = () => {\n  console.log(\"fetch\", this.state.method, this.state.url);\n  fetch(this.state.url,{\n    method: this.state.method || \"get\",\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n   .then(async (res) => {\n    const obj = {};\n    for (let [key, value] of res.headers.entries()) {\n      obj[key] = value;\n    }\n     const resJson = await res.json();\n     this.setState({ responseJson: { Headers: obj, Response: resJson }});\n   })\n}\n\nonChangeMethod = e => this.setState({ method: e.target.value })\nonChangeUrl = e => this.setState({ url: e.target.value });\n\nprintUrlAndMethod = e => {\n  e.preventDefault();\n  this.setState({ goMethod: this.state.method });\n  this.setState({ goUrl: this.state.url });\n  this.fetchData();\n};\n\nrender() {\n  return (\n    <div >\n      <form onSubmit={this.printUrlAndMethod} className=\"form\">\n        <br/>\n        <br/>\n        <br/>\n        <input placeholder=\"http://\" onChange={this.onChangeUrl} />\n        <br/>\n        <input checked type=\"radio\" value=\"GET\" name=\"method\" onChange={this.onChangeMethod} />\n        <label htmlFor=\"GET\">GET</label>\n        <input type=\"radio\" value=\"POST\" name=\"method\" onChange={this.onChangeMethod} />\n        <label htmlFor=\"POST\">POST</label>\n        <input type=\"radio\" value=\"PUT\" name=\"method\" onChange={this.onChangeMethod} />\n        <label htmlFor=\"PUT\">PUT</label>\n        <input type=\"radio\" value=\"DELETE\" name=\"method\" onChange={this.onChangeMethod} />\n        <label htmlFor=\"DELETE\">DELETE</label>\n        <br/>\n        <button type=\"submit\">Go</button>\n      </form>\n      <div>\n        <span>{this.state.goMethod} &nbsp; {this.state.goUrl} </span>\n      </div>\n      <div style={{ float: \"left\" }}>\n      <Results json={this.state.responseJson} />\n      </div>\n    </div>\n  );\n}\n}\n","import React, { Component } from \"react\";\n\nimport '../styles/footer.scss';\n\nexport default class Footer extends Component {\n  render(){\n    return (\n      <footer className=\"footer\">\n      </footer>\n    )\n  }\n}\n","import React from 'react';\nimport './App.css';\n\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <main>\n      <Form />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}