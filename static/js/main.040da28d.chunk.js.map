{"version":3,"sources":["components/Header.js","components/Results.js","components/History.js","components/Form.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","Results","props","json","this","History","items","console","log","map","item","i","key","method","url","type","onClick","selectItem","bind","value","Form","fetchData","state","setState","isLoading","fetch","headers","body","reqBody","JSON","stringify","undefined","then","res","a","obj","entries","resJson","responseJson","Headers","Response","history","localStorage","setItem","onChangeMethod","e","target","onChangeUrl","onChangeBody","printUrlAndMethod","preventDefault","goMethod","goUrl","goBody","onSubmit","name","placeholder","onChange","checked","htmlFor","style","float","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kOAIqBA,G,6KAEjB,OACE,4BAAQC,UAAU,UACf,0C,GAJ2BC,c,wECQrBC,E,qKAPNC,GACL,OACE,kBAAC,IAAD,CAAYC,KAAMC,KAAKF,MAAMC,W,GAHbH,aC0BPK,MA5Bf,SAAiBH,GAAQ,IAAD,OAChBI,EAAQJ,EAAMI,OAAS,GAI7B,OAFAC,QAAQC,IAAI,QAASF,GAGnB,2BAAOP,UAAU,eACf,8CACA,4BAEIO,EAAMG,KAAI,SAACC,EAAMC,GAAP,OACR,wBAAIC,IAAKD,GACP,0BAAMZ,UAAU,eACbW,EAAKG,QAER,0BAAMd,UAAU,YACbW,EAAKI,KAER,2BAAOC,KAAK,SAASC,QAASd,EAAMe,WAAWC,KAAK,EAAMP,GAAIQ,MAAM,iBCb7DC,G,yDACnB,WAAYlB,GAAQ,IAAD,8BACnB,cAAMA,IAeRmB,UAAY,WACVd,QAAQC,IAAI,QAAS,EAAKc,MAAMT,OAAQ,EAAKS,MAAMR,KACnD,EAAKS,SAAS,CAAEC,WAAW,IAC3BC,MAAM,EAAKH,MAAMR,IAAI,CACnBD,OAAQ,EAAKS,MAAMT,OACnBa,QAAS,CACP,eAAgB,oBAElBC,KAAM,EAAKL,MAAMM,QAAWC,KAAKC,UAAU,EAAKR,MAAMM,cAAWG,IAEjEC,KAPF,uCAOO,WAAOC,GAAP,2BAAAC,EAAA,sDACCC,EAAM,GADP,cAEoBF,EAAIP,QAAQU,WAFhC,IAEL,2BAAiD,EAAD,uBAAtCxB,EAAsC,KAAjCO,EAAiC,KAC9CgB,EAAIvB,GAAOO,EAHR,8CAKkBc,EAAI9B,OALtB,OAKEkC,EALF,OAMJ,EAAKd,SAAS,CAAEC,WAAW,EAAOc,aAAc,CAAEC,QAASJ,EAAKK,SAAUH,GAAWI,QAAQ,GAAD,mBAAM,EAAKnB,MAAMmB,SAAjB,CAA0B,CAAE5B,OAAO,EAAKS,MAAMT,OAAQC,IAAK,EAAKQ,MAAMR,IAAKc,QAAS,EAAKN,MAAMM,aAC3Lc,aAAaC,QAAQ,UAAW,EAAKrB,MAAMmB,SAPvC,2CAPP,wDAnBmB,EAqCrBG,eAAiB,SAAAC,GAAO,EAAKtB,SAAS,CAAEV,OAAQgC,EAAEC,OAAO3B,SArCpC,EAsCrB4B,YAAc,SAAAF,GAAC,OAAI,EAAKtB,SAAS,CAAET,IAAK+B,EAAEC,OAAO3B,SAtC5B,EAuCrB6B,aAAe,SAAAH,GAAC,OAAI,EAAKtB,SAAS,CAAEK,QAASiB,EAAEC,OAAO3B,SAvCjC,EAyCrB8B,kBAAoB,SAAAJ,GAClBA,EAAEK,iBACF,EAAK3B,SAAS,CAAE4B,SAAU,EAAK7B,MAAMT,OAAQuC,MAAO,EAAK9B,MAAMR,IAAKuC,OAAQ,EAAK/B,MAAMM,UACvF,EAAKP,aA1CL,EAAKC,MAAQ,CACXT,OAAQ,MACRC,IAAK,GACLc,QAAS,GACTuB,SAAU,GACVC,MAAO,GACPC,OAAQ,GACRf,aAAc,GACdG,QAAS,GACTjB,WAAW,GAEb,EAAKP,WAAa,EAAKA,WAAWC,KAAhB,gBAbC,E,uDA+CVP,GACT,IAAMD,EAAON,KAAKkB,MAAMmB,QAAQ9B,GAChCP,KAAKmB,SAAS,CAAEV,OAAQH,EAAKG,OAAQC,IAAKJ,EAAKI,IAAKc,QAASlB,EAAKkB,Y,+BAIlE,OACE,6BACE,0BAAM0B,SAAUlD,KAAK6C,kBAAmBlD,UAAU,QAChD,6BACA,6BACA,6BACA,2BAAOwD,KAAK,MAAMpC,MAAOf,KAAKkB,MAAMR,IAAK0C,YAAY,UAAUC,SAAUrD,KAAK2C,cAC9E,6BACA,2BAAOW,QAA+B,QAAtBtD,KAAKkB,MAAMT,OAAkBE,KAAK,QAAQI,MAAM,MAAMoC,KAAK,SAASE,SAAUrD,KAAKwC,iBACnG,2BAAOe,QAAQ,OAAf,OACA,2BAAOD,QAA+B,SAAtBtD,KAAKkB,MAAMT,OAAmBE,KAAK,QAAQI,MAAM,OAAOoC,KAAK,SAASE,SAAUrD,KAAKwC,iBACrG,2BAAOe,QAAQ,QAAf,QACA,2BAAOD,QAA+B,QAAtBtD,KAAKkB,MAAMT,OAAkBE,KAAK,QAAQI,MAAM,MAAMoC,KAAK,SAASE,SAAUrD,KAAKwC,iBACnG,2BAAOe,QAAQ,OAAf,OACA,2BAAOD,QAA+B,WAAtBtD,KAAKkB,MAAMT,OAAqBE,KAAK,QAAQI,MAAM,SAASoC,KAAK,SAASE,SAAUrD,KAAKwC,iBACzG,2BAAOe,QAAQ,UAAf,UACA,6BACA,6BACA,8BAAUJ,KAAK,UAAUE,SAAUrD,KAAK4C,aAAc7B,MAAOf,KAAKkB,MAAMM,UACxE,6BACA,4BAAQb,KAAK,UAAb,OAEF,6BACE,8BAAOX,KAAKkB,MAAM6B,SAAlB,SAAoC/C,KAAKkB,MAAM8B,MAA/C,MAEF,yBAAKQ,MAAO,CAAEC,MAAO,SACrB,kBAAC,EAAD,CAAS5C,WAAYb,KAAKa,WAAYX,MAAOF,KAAKkB,MAAMmB,UACtDrC,KAAKkB,MAAME,UAAY,uCAAmB,kBAAC,EAAD,CAASrB,KAAMC,KAAKkB,MAAMgB,qB,GAjF1CtC,cCHb8D,G,8KAEjB,OACE,4BAAQ/D,UAAU,e,GAHYC,cCerB+D,MAZf,WACE,OACE,yBAAKhE,UAAU,OACb,kBAAC,EAAD,MACA,8BACA,kBAAC,EAAD,OAEA,kBAAC,EAAD,QCFciE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzE,QAAQyE,MAAMA,EAAMC,a","file":"static/js/main.040da28d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport '../styles/header.scss';\n\nexport default class Header extends Component {\n  render(){\n    return (\n      <header className=\"header\">\n         <h1>RESTy</h1>\n      </header>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport JSONPretty from 'react-json-prettify';\n\n\nclass Results extends Component {\n  render(props) {\n    return (\n      <JSONPretty json={this.props.json} />\n    )\n  }\n}\n\nexport default Results\n","import React from 'react';\n\nfunction History(props) {\n  const items = props.items || [];\n\n  console.log(\"items\", items);\n\n  return (\n    <aside className=\"App-history\">\n      <h4>Search History</h4>\n      <ul>\n        {\n          items.map((item, i) =>\n            <li key={i}>\n              <span className=\"method-span\">\n                {item.method}\n              </span>\n              <span className=\"url-span\">\n                {item.url}\n              </span>\n              <input type=\"button\" onClick={props.selectItem.bind(this, i)} value=\"click\" />\n            </li>\n          )\n        }\n      </ul>\n    </aside>\n  )\n}\n\n\nexport default History;\n","import React, { Component } from \"react\";\n\nimport Results from \"./Results\";\nimport History from \"./History\";\n  \nimport '../styles/form.scss';\n\nexport default class Form extends Component {\n  constructor(props) {\n  super(props);\n  this.state = {\n    method: 'GET',\n    url: '',\n    reqBody: '',\n    goMethod: \"\",\n    goUrl: \"\",\n    goBody: \"\",\n    responseJson: {},\n    history: [],\n    isLoading: false,\n  }\n  this.selectItem = this.selectItem.bind(this);\n}\n\nfetchData = () => {\n  console.log(\"fetch\", this.state.method, this.state.url);\n  this.setState({ isLoading: true });\n  fetch(this.state.url,{\n    method: this.state.method,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: this.state.reqBody ?  JSON.stringify(this.state.reqBody) : undefined,\n  })\n   .then(async (res) => {\n    const obj = {};\n    for (let [key, value] of res.headers.entries()) {\n      obj[key] = value;\n    }\n     const resJson = await res.json();\n     this.setState({ isLoading: false, responseJson: { Headers: obj, Response: resJson }, history: [...this.state.history, { method:this.state.method, url: this.state.url, reqBody: this.state.reqBody }]});\n     localStorage.setItem(\"history\", this.state.history);\n   })\n}\n\nonChangeMethod = e => { this.setState({ method: e.target.value }) }\nonChangeUrl = e => this.setState({ url: e.target.value });\nonChangeBody = e => this.setState({ reqBody: e.target.value });\n\nprintUrlAndMethod = e => {\n  e.preventDefault();\n  this.setState({ goMethod: this.state.method, goUrl: this.state.url, goBody: this.state.reqBody });\n  this.fetchData();\n};\n\nselectItem(i){\n  const item = this.state.history[i];\n  this.setState({ method: item.method, url: item.url, reqBody: item.reqBody });\n}\n\nrender() {\n  return (\n    <div >\n      <form onSubmit={this.printUrlAndMethod} className=\"form\">\n        <br/>\n        <br/>\n        <br/>\n        <input name=\"url\" value={this.state.url} placeholder=\"http://\" onChange={this.onChangeUrl} />\n        <br/>\n        <input checked={this.state.method === \"GET\"} type=\"radio\" value=\"GET\" name=\"method\" onChange={this.onChangeMethod} />\n        <label htmlFor=\"GET\">GET</label>\n        <input checked={this.state.method === \"POST\"} type=\"radio\" value=\"POST\" name=\"method\" onChange={this.onChangeMethod} />\n        <label htmlFor=\"POST\">POST</label>\n        <input checked={this.state.method === \"PUT\"} type=\"radio\" value=\"PUT\" name=\"method\" onChange={this.onChangeMethod} />\n        <label htmlFor=\"PUT\">PUT</label>\n        <input checked={this.state.method === \"DELETE\"} type=\"radio\" value=\"DELETE\" name=\"method\" onChange={this.onChangeMethod} />\n        <label htmlFor=\"DELETE\">DELETE</label>\n        <br/>\n        <br/>\n        <textarea name=\"reqBody\" onChange={this.onChangeBody} value={this.state.reqBody}/>\n        <br/>\n        <button type=\"submit\">Go</button>\n      </form>\n      <div>\n        <span>{this.state.goMethod} &nbsp; {this.state.goUrl} </span>\n      </div>\n      <div style={{ float: \"left\" }}>\n      <History selectItem={this.selectItem} items={this.state.history} />\n      { this.state.isLoading ? <h1>Loading</h1> : <Results json={this.state.responseJson} />}\n      </div>\n    </div>\n  );\n}\n}\n","import React, { Component } from \"react\";\n\nimport '../styles/footer.scss';\n\nexport default class Footer extends Component {\n  render(){\n    return (\n      <footer className=\"footer\">\n      </footer>\n    )\n  }\n}\n","import React from 'react';\nimport './App.css';\n\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <main>\n      <Form />\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}